<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.airbnb.airbnb_service.mapper.BookingMapper">
    <select id="selectBookingList" resultType="com.airbnb.airbnb_service.data.response.TripResponseVO">
        SELECT 
            bi.bi_seq,
            bi.bi_start_dt,
            bi.bi_end_dt,
            bi.bi_reg_dt,
            bi.bi_status,
            bi.bi_confirm_dt,
            bgi.bgi_adult AS adult,
            bgi.bgi_child AS child,
            bgi.bgi_infant AS infant,
            bgi.bgi_dog AS dog,
            hi.hi_seq,
            hi.hi_name,
            cc.cc_content AS country,
            hai.hai_city AS city,
            hai.hai_detail AS detail,
            himg.himg_file AS main_img,
            bfi.bfi_basic_fee as basic_fee,
            bfi.bfi_cleaning_fee as clean_fee,
            bfi.bfi_service_fee as service_fee,
            bfi.bfi_total_fee as total_fee,
            IFNULL(wish_seq,0) AS wish_seq
        FROM booking_info bi
        LEFT JOIN booking_guest_info bgi 
            ON bi.bi_seq = bgi.bgi_bi_seq 
        LEFT JOIN house_info hi 
            ON hi.hi_seq = bi.bi_hi_seq
        LEFT JOIN house_address_info hai 
            ON hi.hi_seq = hai.hai_hi_seq 
        LEFT JOIN house_img himg
            ON hi.hi_seq = himg.himg_hi_seq
        LEFT JOIN category_country cc 
            ON cc.cc_seq = hai.hai_cc_seq
        LEFT JOIN booking_fee_info bfi
            ON bi.bi_seq = bfi.bfi_seq
        LEFT JOIN wish_info wish 
            ON bi.bi_hi_seq = wish.wish_hi_seq AND bi.bi_mi_seq = wish.wish_mi_seq 
        WHERE bi_mi_seq = #{user_seq} AND himg_main = 1
        <if test = "period == 1">
            and bi_status != 2 and date(bi_start_dt) <![CDATA[>=]]> now()
        </if>
        <if test = "period == 2">
            and bi_status = 1 and date(bi_start_dt) <![CDATA[<]]> now()
        </if>
        order by bi.bi_start_dt desc limit 10 offset #{offset}
    </select>
    <select id="selectBookingCount" resultType="com.airbnb.airbnb_service.data.response.TripCountPageVO">
        select 
            count(
                case 
                    when date(bi_start_dt) <![CDATA[>=]]> date(now())
                    then 1 
                end
                /10) as beforeCnt, 
            count(
                case 
                    when date(bi_start_dt) <![CDATA[<]]> date(now()) and bi_status = 1
                    then 1 
                end
                /10) as afterCnt
        from booking_info
        where bi_mi_seq = ${user_seq} and bi_status!=2
    </select>
    <select id="selectBookingPageCount" resultType="com.airbnb.airbnb_service.data.response.TripCountPageVO">
        select 
            ceil(count(
                case 
                    when date(bi_start_dt) <![CDATA[>=]]> date(now())
                    then 1 
                end
                )/10) as beforeCnt, 
            ceil(count(
                case 
                    when date(bi_start_dt) <![CDATA[<]]> date(now()) and bi_status = 1
                    then 1 
                end
                )/10) as afterCnt
        from booking_info
        where bi_mi_seq = ${user_seq} and bi_status!=2
    </select>
    <select id="selectHouseFee" resultType="com.airbnb.airbnb_service.data.response.HouseFeeVO">
        SELECT hfi.hfi_base_price AS base_price,
                hfi.hfi_cleaning_fee AS cleaning_fee,
                hfi.hfi_service_fee AS service_fee
        FROM house_fee_info hfi 
        WHERE hfi.hfi_hi_seq = #{house_seq}
    </select>
    <select id="selectHouseOptionView" resultType="com.airbnb.airbnb_service.data.response.HouseOptionVO">
        SELECT * FROM (
            (
                SELECT 1 AS cycle_no,
                        hdo.hdo_seq AS option_seq,
                        hdo.hdo_hi_seq AS house_seq, 
                        hdo.hdo_name AS option_name,
                        hdo.hdo_rate AS option_rate,
                        0 AS option_day,
                        hdo.hdo_enable_dt AS option_end_dt,
                        hdo.hdo_enable AS enable
                FROM house_daily_option hdo 
            ) UNION ALL(
                SELECT 2 AS cycle_no,
                        hwo.hwo_seq AS option_seq,
                        hwo.hwo_hi_seq AS house_seq,
                        hwo.hwo_name AS option_name,
                        hwo.hwo_rate AS option_rate,
                        hwo.hwo_weekly AS option_day,
                        hwo.hwo_enable_dt AS option_end_dt,
                        hwo.hwo_enable AS enable
                FROM house_weekly_option hwo 
            ) UNION ALL ( 
                SELECT 3 AS cycle_no,
                        hmo.hmo_seq AS option_seq,
                        hmo.hmo_hi_seq AS house_seq,
                        hmo.hmo_name AS option_name,
                        hmo.hmo_rate AS option_rate,
                        hmo.hmo_monthly AS option_day,
                        hmo.hmo_enable_dt AS option_end_dt,
                        hmo.hmo_enable AS enable
                FROM house_monthly_option hmo
            )
        )opt
        WHERE house_seq = #{house_seq}
            AND enable !=0 
            AND option_end_dt <![CDATA[>=]]> date(now())
    </select>
    <select id="selectBookingCnt" resultType="java.lang.Integer">
        SELECT COUNT(*) AS booking FROM booking_info
        WHERE bi_hi_seq = #{house_seq} AND bi_status = 1 
            AND ( #{dt} BETWEEN date(bi_start_dt) AND date(bi_end_dt) )
    </select>
    <insert id="insertBookingInfo"
        parameterType="com.airbnb.airbnb_service.data.request.BookingRequest"
        useGeneratedKeys="true" keyProperty="bi_seq">
        INSERT INTO booking_info
        (bi_mi_seq, bi_hi_seq, bi_start_dt, bi_end_dt, bi_guest_phone)
        VALUES
        (#{guest_seq},#{house_seq},#{in_dt},#{out_dt},#{guest_phone})
    </insert>
    <insert id="insertBookingGuest">
        INSERT INTO booking_guest_info
        (bgi_bi_seq,bgi_adult,bgi_child,bgi_infant,bgi_dog)
        VALUES
        (#{booking_seq},#{adult},#{child},#{infant},#{dog})
    </insert>
    <insert id="insertBookingFee">
        INSERT INTO booking_fee_info
        (bfi_bi_seq,bfi_basic_fee,bfi_cleaning_fee,bfi_service_fee,bfi_total_fee)
        VALUES
        (#{booking_seq},#{basic_fee},#{cleaning_fee},#{service_fee},#{total_fee})
    </insert>
</mapper>