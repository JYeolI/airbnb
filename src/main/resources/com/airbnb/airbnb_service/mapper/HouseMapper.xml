<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.airbnb.airbnb_service.mapper.HouseMapper">
    <select id="selectSearchHouseList" resultType="com.airbnb.airbnb_service.data.response.MainViewResponseVO">
        SELECT 
            main.hi_seq AS house_seq,
            main.hi_mi_seq  AS host_seq,
            main.hi_name  AS house_name,
            main.main_img,
            main.country,
            main.city,
            main.address,
            main.total_avg,
            main.price,
            main.super_host
        <if test="user_seq != null">
            ,        
            IFNULL(wish.wish,0) AS wish,
            IFNULL(wish.wish_seq,0) AS wish_seq
        </if>
        FROM main_search_view main
        <if test="user_seq != null">
            LEFT JOIN (
                SELECT wish_seq, wish_hi_seq, 1 AS wish
                FROM wish_info
                WHERE wish_mi_seq = #{user_seq}
            )wish
            ON main.hi_seq = wish.wish_hi_seq
        </if>
        <if test="request.cate_place != null">
            LEFT JOIN (
                SELECT hpi_hi_seq, 1 AS place
                FROM house_place_info
                WHERE hpi_cp_seq = #{request.cate_place}
                GROUP BY hpi_hi_seq 
            )hpi
            ON main.hi_seq = hpi.hpi_hi_seq
        </if>
        <if test="request.in_dt != null and request.out_dt != null">
            LEFT JOIN (
                SELECT bi_hi_seq, count(*) AS booking
                FROM booking_info
                WHERE 
                    date(bi_start_dt) BETWEEN #{request.in_dt} AND #{request.out_dt}
                    OR (#{request.out_dt} BETWEEN date(bi_start_dt) AND date(bi_end_dt))
                GROUP BY bi_hi_seq
            )bi
            ON main.hi_seq = bi.bi_hi_seq
        </if>
        <if test="request.amenity.size != 0">
            LEFT JOIN (
                SELECT * FROM house_amenity_info
                WHERE 
                <foreach collection="request.amenity" item="amenity" separator="and">
                    ham_ca_seq = #{amenity.amenity}
                </foreach>
                GROUP BY ham_hi_seq
            )ham
            ON main.hi_seq = ham.ham_hi_seq
        </if>
        <if test="request.lang.size != 0">
            LEFT JOIN (
                SELECT * FROM member_lang_info 
                WHERE 
                <foreach collection="request.lang" item="lang" separator="and">
                    mli_cl_seq = #{lang.lang}
                </foreach>
                GROUP BY mli_mi_seq 
            )mli
            ON main.hi_mi_seq = mli_mi_seq
        </if>
        WHERE main.hi_status = 0
        <if test="request.keyword != null">
            AND (
                    country like concat('%','${request.keyword}','%') 
                    OR city like concat('%','${request.keyword}','%') 
                    OR address like concat('%','${request.keyword}','%')
                )
        </if>
        <if test="request.guest != 0">
            AND guest <![CDATA[>=]]> #{request.guest}
        </if>
        <if test="request.dog != 0">
            AND dog = 1
        </if>
        <if test="request.cate_sort_detail != null">
            AND main.cate_sort_detail = #{request.cate_sort_detail}
        </if>
        <choose>
            <when test="request.min != null || request.max != null">
                AND price BETWEEN #{request.min} AND #{request.max}
            </when>
            <when test="request.max != null">
                AND price <![CDATA[>=]]> #{request.min}   
            </when>
            <when test="request.min != null">
                AND price <![CDATA[<=]]> #{request.max}
            </when>
        </choose>
        <if test="request.type != null">
            AND hi_type = #{request.type}
        </if>
        <if test="request.bed != 0">
            AND bed <![CDATA[>=]]> #{request.bed}
        </if>
        <if test="request.bedroom != 0">
            AND bedroom <![CDATA[>=]]> #{request.bedroom}
        </if>
        <if test="request.bathroom != 0">
            AND bathroom <![CDATA[>=]]> #{request.bathroom}
        </if>
        <if test="request.sort.size != 0">
            AND 
            <foreach collection="request.sort" item="sort" separator="and">
                main.cate_sort = #{sort.sort}
            </foreach>
        </if>
        <if test="request.superhost != 0">
            AND super_host = #{request.superhost}
        </if>
        <if test="request.in_dt != null || request.out_dt != null">
            AND booking = 0
        </if>
    </select>
    
    <select id="selectHouseList" resultType="com.airbnb.airbnb_service.data.response.ProfileHostingHouseVO">
        SELECT
            hi_seq AS house_seq,
            hi_name AS house_name,
            himg_file AS house_img,
            total_avg,
            hi_type AS type,
            cs_content AS sort,
            csd_content AS sort_detail,
            hi_description AS house_desc
        FROM member_info mi
        LEFT JOIN house_info hi
            ON mi.mi_seq = hi.hi_mi_seq
        LEFT JOIN house_img himg
            ON hi.hi_seq = himg.himg_hi_seq
        LEFT JOIN rev_point_view rpv 
            ON rpv.rpv_hi_seq = hi.hi_seq 
        LEFT JOIN category_sort_detail csd
            ON hi.hi_csd_seq = csd.csd_seq
        LEFT JOIN category_sort cs
            ON csd.csd_cs_seq = cs.cs_seq
        WHERE mi.mi_seq = #{member_seq} 
            AND himg.himg_main = 1 AND hi.hi_status = 0
    </select>
    
    <select id="selectHouseDetail" resultType="com.airbnb.airbnb_service.data.response.HouseDetailVO">
        SELECT 
            hi.hi_seq AS house_seq,
            hi.hi_name AS house_name,
            cs.cs_content AS house_sort,
            csd.csd_content AS house_sort_detail,
            hi.hi_description AS house_description,
            hi.hi_rule AS house_rule,
            hi.hi_check_in AS house_check_in,
            hi.hi_check_out AS house_check_out,
            hi.hi_refund_day AS house_refund_day,
            hi.hi_status AS house_status,
            cc.cc_content AS house_country,
            hai.hai_city AS house_city,
            hai.hai_detail AS house_address,
            hgi.hgi_guest AS house_guest,
            hgi.hgi_dog AS house_dog,
            hgi.hgi_bed AS house_bed,
            hgi.hgi_bedroom AS house_bedroom,
            hgi.hgi_bathroom AS house_bathroom,
            mi.mi_seq AS host_seq,
            mi.mi_name AS host_name,
            mi.mi_description AS host_description,
            mi.mi_reg_dt AS host_reg_dt,
            mi.mi_host_grade AS super_host,
            mi.mi_status AS host_status,
            mimg.mimg_file AS host_img
        FROM house_info hi
        LEFT JOIN house_address_info hai
            ON hi.hi_seq = hai.hai_hi_seq 
        LEFT JOIN category_country cc
            ON cc.cc_seq = hai.hai_cc_seq
        LEFT JOIN member_info mi 
            ON hi.hi_mi_seq = mi.mi_seq
        LEFT JOIN member_img mimg 
            ON mi.mi_seq = mimg.mimg_mi_seq
        LEFT JOIN house_guest_info hgi 
            ON hgi.hgi_hi_seq = hi.hi_seq
        LEFT JOIN category_sort_detail csd
            ON csd.csd_seq = hi.hi_csd_seq
        LEFT JOIN category_sort cs
            ON cs.cs_seq = csd.csd_cs_seq 
        WHERE hi.hi_seq = #{house_seq}
    </select>    
    <select id="selectHouseAmenityList" resultType="com.airbnb.airbnb_service.data.response.HouseAmenityVO">
        SELECT
            ca.ca_seq AS amenity_seq,
            ca.ca_type AS amenity_type,
            ca.ca_content AS amenity_content,
            ca.ca_description AS amenity_description,
            ca.ca_icon AS amenity_icon
        FROM house_amenity_info ham
        LEFT JOIN category_amenity ca 
            ON ham.ham_ca_seq = ca.ca_seq
        WHERE ham_hi_seq = #{house_seq}
        ORDER BY ca.ca_type asc
    </select>
    <select id="selectHouseImageList" resultType="java.lang.String">
        SELECT himg_file AS house_image
        FROM house_img himg
        WHERE himg.himg_hi_seq = #{house_seq}
        ORDER BY himg.himg_main DESC
    </select>
    <select id="selectHostLangList" resultType="java.lang.String">
        SELECT cl.cl_content AS lang
        FROM member_lang_info mli
        LEFT JOIN category_lang cl 
            ON mli.mli_cl_seq = cl.cl_seq
        WHERE mli.mli_mi_seq = #{host_seq}
    </select>
    <select id="selectHostingHouseCnt" resultType="java.lang.Integer">
        SELECT IFNULL(COUNT(hi_seq),0) AS hosting_house_cnt
        FROM house_info
        WHERE hi_mi_seq = #{host_seq}
    </select>

    <insert id="insertHouseInfo"
        parameterType="com.airbnb.airbnb_service.data.house.HouseInfoVO"
        useGeneratedKeys="true" keyProperty="hi_seq">
        INSERT INTO house_info
        (
            hi_mi_seq, hi_csd_seq, hi_name, hi_type, hi_description, 
            hi_host_phone, hi_rule, hi_check_in, hi_check_out
        )
        VALUES
        (
            #{hi_mi_seq}, #{hi_csd_seq}, #{hi_name}, #{hi_type}, #{hi_description}, 
            #{hi_host_phone}, #{hi_rule}, #{hi_check_in}, #{hi_check_out}
        )
    </insert>
    <insert id="insertHouseImg" >
        INSERT INTO house_img
        (himg_hi_seq, himg_file, himg_main)
        VALUES
        <foreach collection="img_list" item="img" separator=",">
            (#{house_seq}, #{img.himg_file}, #{img.himg_main})
        </foreach>
    </insert>
    <insert id="insertHouseGuest">
        INSERT INTO house_guest_info
        (hgi_hi_seq, hgi_guest, hgi_bed, hgi_bedroom, hgi_bathroom, hgi_dog)
        VALUES
        (#{hgi_hi_seq}, #{hgi_guest}, #{hgi_bed}, #{hgi_bedroom}, #{hgi_bathroom}, #{hgi_dog})
    </insert>
    <insert id="insertHouseAmenity">
        INSERT INTO house_amenity_info
        (ham_hi_seq, ham_ca_seq)
        VALUES
        <foreach collection="amenity_list" item="amenity" separator=",">
        (#{house_seq}, #{amenity})
        </foreach>
    </insert>
    <insert id="insertHouseFee">
        INSERT INTO house_fee_info
        (hfi_hi_seq, hfi_base_price)
        VALUES
        (#{hfi_hi_seq}, #{hfi_base_price})
    </insert>
    <insert id="insertHouseAddress">
        INSERT INTO house_address_info
        (hai_hi_seq, hai_cc_seq, hai_city, hai_detail)
        VALUES
        (#{hai_hi_seq}, #{hai_cc_seq}, #{hai_city}, #{hai_detail})
    </insert>
</mapper>